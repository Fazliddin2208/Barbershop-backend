// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  telegramId String   @unique
  name       String
  phone      String?
  createdAt  DateTime @default(now())

  bookings Booking[]
}

model Barbershop {
  id          String   @id @default(uuid())
  name        String
  address     String
  telegramBot String?
  createdAt   DateTime @default(now())

  barbers  Barber[]
  services Service[]
}

model Barber {
  id        String @id @default(uuid())
  name      String
  workStart String
  workEnd   String

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String

  timeslots TimeSlot[]
}

model Service {
  id          String @id @default(uuid())
  name        String
  durationMin Int
  price       Float

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String

  bookings Booking[]
}

model TimeSlot {
  id        String   @id @default(uuid())
  date      DateTime
  startTime String
  isBooked  Boolean  @default(false)

  barber   Barber @relation(fields: [barberId], references: [id])
  barberId String

  booking Booking?
}

model Booking {
  id       String   @id @default(uuid())
  bookedAt DateTime @default(now())
  status   String   @default("pending")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  timeSlotId String   @unique
  timeslot   TimeSlot @relation(fields: [timeSlotId], references: [id])

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
}
